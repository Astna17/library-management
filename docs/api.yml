openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22027
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateFrom
          description: Filter books released on after the date.
          required: false
          schema:
            type: string
            format: date
        - in : query
          name: releaseDateTo
          description: Filter books released on before the date.
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors:
    get:
      summary: get all authors
      description: filter a list of all authors by name
      operationId: getAuthor
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name.
          required: false
          schema:
            type: string

      responses:
        200:
          description: the list of author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authors'

    put:
      summary: create or update an author
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: '#/components/schemas/Authors'

      responses:
        200:
          description: the list of create or update authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authors'

    delete:
      summary: Delete an authors
      description: delete an author by their Id.
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: the ID of the author to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request

  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update the Author of a Book
      operationId: UpdateTheAuthorOfaBook
      parameters:

        - name: bookId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Book

        - name: authorId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Author

      responses:
        '200':
          description: the update book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

components:
  schemas:
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      type: object
      properties:
        author:
          $ref: '#/components/schemas/Authors'
    Authors:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date