openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22027
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookList'

        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody400'

        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody403'

        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody500'

    put:
       tags:
         - Books
       summary: Create or update a list of books
       operationId: crupdateBooks
       requestBody:
        content:
         application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Book"

       responses:
         200:
           description: Success
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BookList'

         400:
           description: Bad request
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BadRequestBody400'

         403:
           description: Forbidden
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BadRequestBody403'

         500:
           description: Server error
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/BadRequestBody500'


  /books/import:
    post:
      tags:
        - Books
      summary: Import books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBookJSON'
                - $ref: '#/components/schemas/ImportBookExcel'

      responses:
        200:
          description: Successful import
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors

      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'

        - name: authorName
          in: query
          description: Filter returned authors by given name.
          schema:
            type: string
          required: false

      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'

        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody400'

        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody403'

        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody500'

    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'

        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody400'

        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody403'

        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody500'

    delete:
      tags:
        - Authors
      summary: Delete author by id
      description: Deleting an author by id
      parameters:
        - name: authorName
          in: query
          required: true
          schema:
            type: string
      responses:
          200:
            description: Author deleted successfully

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors
      requestBody:
         required: true
         content:
           application/json:
             schema:
               oneOf:
                 - $ref: '#/components/schemas/ImportAuthorExcel'
                 - $ref: '#/components/schemas/ImportAuthorJSON'

      responses:
        200:
          description: Successful import
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

components:

  parameters:
    queryPagination:
      name: page
      in: query
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1


    pathPagination:
      name: pageSize
      in: path
      schema:
        type: object
        properties:
          pageSize:
            type: integer
            default: 50
      required: true

  schemas:

    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F

    ImportAuthorJSON:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string

    ImportAuthorExcel:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string


    ImportBookJSON:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
        idAuthor:
          type: integer

    ImportBookExcel:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
        idAuthor:
          type: integer

    BaseResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: string
              default: "Default code"
            message:
              type: string
              default: "default message"
        body:
          type: object

    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string

    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object

    BadRequestBody400:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status: 400
        message: Bad request
        body: { }

    BadRequestBody403:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status: 403
        message: Forbidden
        body: { }

    BadRequestBody500:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status: 500
        message: Internal Server Error
        body: { }


    BookList:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'

    AuthorList:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'

  responses:
    BookList_200:
      description: List of books.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookList'

    AuthorList_200:
      description: List of authors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorList'

    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'
