openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22027
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDate
          description: Filter books released on the date.
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /Books/borrowed:
    get:
      tags:
        - Books
      summary: List of books on loan
      description: Get of books borrowed
      responses:
        200:
          description: The list of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/available:
    get:
      tags:
        - Books
      summary: Get available books
      description: Get the list of books available for borrowing
      responses:
        200:
          description: The list of available books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /authors:
    get:
      tags:
        - Authors
      summary: get all authors
      description: filter a list of all authors by name
      operationId: getAuthor
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name.
          required: false
          schema:
            type: string
      responses:
        200:
          description: the list of author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authors'
    put:
      tags:
        - Authors
      summary: create or update an author
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: '#/components/schemas/Authors'
      responses:
        200:
          description: the list of create or update authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Authors'

    delete:
      tags:
        - Authors
      summary: Delete an authors
      description: delete an author by their Id.
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: the ID of the author to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request

  /Visitors:
    get:
      tags:
        - Visitors
      summary: Get the list of visitors
      operationId: AllVisitor
      responses:
        200:
          description: Giving all visitor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'

  /Visitors/{visitorID}/borrowedBooks:
    get:
      summary: Get the list of books borrowed by a visitor
      parameters:
        - in: path
          name: visitorID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BorrowRequest'
        400:
          description: Visitor not found
  /Visitors/{visitorID}/returnedBook:
    get:
      summary: Get the list of books returned by a visitor
      parameters:
        - in: path
          name: visitorID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response

        400:
          description: Visitor not found

  /Visitors/{visitorID}/activities:
    get:
      tags:
        - Visitors
      summary: Get details of a specific visitor
      description: Get the list of activities performed by a visitor
      parameters:
        - name: visitorID
          in: path
          required: true
          schema:
            type: string
        - name: FromDate
          in: query
          description: Starting date
          required: true
          schema:
            type: string
            format: date-time
        - name: ToDate
          in: query
          description: Ending date
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VisitorActivity'
        400:
          description: Visitor not found

components:
  schemas:
    Visitor:
      type: object
      properties:
        Id:
          type: string
        visitorName:
          type: string
        reference:
          type: string
        activities:
          type: array
          items:
            $ref: '#/components/schemas/VisitorActivity'

    VisitorActivity:
      type: object
      properties:
        activityType:
          type: string
          enum:
            - BORROW
            - RETURN
        bookId:
          type: string
        date:
          type: string
          format: date-time

    BorrowRequest:
      type: object
      properties:
        idBorrowRequest:
          type: string
        idVisitor:
          type: string
        idBook:
          type: string
        borrowingDate:
          type: string
          format: date

    ReturnRequest:
      type: object
      properties:
        idReturn:
          type: string
        idVisitor:
          type: string
        idBook:
          type: string
        ReturnedDate:
          type: string
          format: date

    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Authors'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Authors:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F